

//! Autogenerated weights for `pallet_validated_streams`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-10, STEPS: `1`, REPEAT: 100, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `apocryph-server-7d59769d7-6rm6l`, CPU: `Intel(R) Xeon(R) Gold 6126 CPU @ 2.60GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_validated_streams
// --extrinsic
// *
// --steps
// 1
// --repeat
// 100
// --output
// pallet/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;
pub trait WeightInfo {
	fn validate_event() -> Weight;
}
/// Weight functions for `pallet_validated_streams`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::WeightInfo for SubstrateWeight<T> {
	// Storage: ValidatedStreams Streams (r:1 w:1)
	fn validate_event() -> Weight {
			Weight::from_parts(13_020_000, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}
