syntax = "proto3";
package ValidatedStreams;

service Streams {
  /// Submit an event to the chain. Call that from the trusted client to get an event from the oracle validated by the network. Note that the event would be validated only if the other trusted clients submit the same event id.
  /// An event is an extrinsic that could be included in the block and executed by the validated-streams pallet
  rpc WitnessEvent(WitnessEventRequest) returns (WitnessEventResponse);

  rpc ValidatedEvents(ValidatedEventsRequest) returns (stream ValidatedEventsResponse);
}

message WitnessEventRequest {
  // Event ID. A _hash_ (or similar) of exactly 32 bytes length. If you need to send larger messages, hash them first (using something like IPFS), and then send that.
  bytes event_id = 1;

  // // Signature. A signature of the event by one of the authorities of the chain. Optional, for advanced usecases where the trusted client is the one signing the events as opposed to the node itself.
  // WitnessedEventSignature = 2;
}
// message WitnessedEventSignature {
//   bytes signature = 1;
//   bytes pub_key = 2;
// }

message WitnessEventResponse {
}

message ValidatedEventsRequest {
  uint32 from_block = 1;
}
message ValidatedEventsResponse {
  uint32 next_block = 1;
  repeated ValidatedEvent events = 2;
}
message ValidatedEvent {
  bytes event_id = 1;
}
